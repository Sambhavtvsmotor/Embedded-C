
pin_read.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000188  08000000  08000000  00001000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00000150  08000188  08000188  00001188  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000000  080002d8  080002e0  000012e0  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  3 .ARM.extab    00000000  080002d8  080002d8  000012e0  2**0
                  CONTENTS, READONLY
  4 .ARM          00000000  080002d8  080002d8  000012e0  2**0
                  CONTENTS, READONLY
  5 .preinit_array 00000000  080002d8  080002e0  000012e0  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  080002d8  080002d8  000012d8  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  7 .fini_array   00000004  080002dc  080002dc  000012dc  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  8 .data         00000000  20000000  20000000  000012e0  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  9 .ccmram       00000000  10000000  10000000  000012e0  2**0
                  CONTENTS
 10 .bss          0000001c  20000000  20000000  00002000  2**2
                  ALLOC
 11 ._user_heap_stack 00000604  2000001c  2000001c  00002000  2**0
                  ALLOC
 12 .ARM.attributes 0000002a  00000000  00000000  000012e0  2**0
                  CONTENTS, READONLY
 13 .debug_info   00000135  00000000  00000000  0000130a  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_abbrev 000000bc  00000000  00000000  0000143f  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_loclists 0000001b  00000000  00000000  000014fb  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_aranges 00000048  00000000  00000000  00001518  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_rnglists 0000002c  00000000  00000000  00001560  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_macro  00000f88  00000000  00000000  0000158c  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_line   000004ce  00000000  00000000  00002514  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .debug_str    00003c95  00000000  00000000  000029e2  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .comment      00000043  00000000  00000000  00006677  2**0
                  CONTENTS, READONLY
 22 .debug_frame  0000004c  00000000  00000000  000066bc  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 23 .debug_line_str 00000064  00000000  00000000  00006708  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000188 <__do_global_dtors_aux>:
 8000188:	b510      	push	{r4, lr}
 800018a:	4c05      	ldr	r4, [pc, #20]	@ (80001a0 <__do_global_dtors_aux+0x18>)
 800018c:	7823      	ldrb	r3, [r4, #0]
 800018e:	b933      	cbnz	r3, 800019e <__do_global_dtors_aux+0x16>
 8000190:	4b04      	ldr	r3, [pc, #16]	@ (80001a4 <__do_global_dtors_aux+0x1c>)
 8000192:	b113      	cbz	r3, 800019a <__do_global_dtors_aux+0x12>
 8000194:	4804      	ldr	r0, [pc, #16]	@ (80001a8 <__do_global_dtors_aux+0x20>)
 8000196:	f3af 8000 	nop.w
 800019a:	2301      	movs	r3, #1
 800019c:	7023      	strb	r3, [r4, #0]
 800019e:	bd10      	pop	{r4, pc}
 80001a0:	20000000 	.word	0x20000000
 80001a4:	00000000 	.word	0x00000000
 80001a8:	080002c0 	.word	0x080002c0

080001ac <frame_dummy>:
 80001ac:	b508      	push	{r3, lr}
 80001ae:	4b03      	ldr	r3, [pc, #12]	@ (80001bc <frame_dummy+0x10>)
 80001b0:	b11b      	cbz	r3, 80001ba <frame_dummy+0xe>
 80001b2:	4903      	ldr	r1, [pc, #12]	@ (80001c0 <frame_dummy+0x14>)
 80001b4:	4803      	ldr	r0, [pc, #12]	@ (80001c4 <frame_dummy+0x18>)
 80001b6:	f3af 8000 	nop.w
 80001ba:	bd08      	pop	{r3, pc}
 80001bc:	00000000 	.word	0x00000000
 80001c0:	20000004 	.word	0x20000004
 80001c4:	080002c0 	.word	0x080002c0

080001c8 <main>:



//	1. Enabling the clock for GPIOD peripheral in the ANB1EN
//	*pRCCAHB1 |= 0x08;
	*pRCCAHB1 |= (1 << 3);
 80001c8:	4a14      	ldr	r2, [pc, #80]	@ (800021c <main+0x54>)
	*pRCCAHB1 |= 0x1;

//	2.Configure the mode of the IO pin at output
//	a.clear the 24th and 25th bit positions (clear)
//	*pGPIODmode &= 0xFCFFFFFF;
	*pGPIODmode &= (0 << 24);
 80001ca:	4b15      	ldr	r3, [pc, #84]	@ (8000220 <main+0x58>)
	*pRCCAHB1 |= (1 << 3);
 80001cc:	f8d2 1830 	ldr.w	r1, [r2, #2096]	@ 0x830
 80001d0:	f041 0108 	orr.w	r1, r1, #8
 80001d4:	f8c2 1830 	str.w	r1, [r2, #2096]	@ 0x830
	*pRCCAHB1 |= 0x1;
 80001d8:	f8d2 1830 	ldr.w	r1, [r2, #2096]	@ 0x830
 80001dc:	f041 0101 	orr.w	r1, r1, #1
 80001e0:	f8c2 1830 	str.w	r1, [r2, #2096]	@ 0x830
	*pGPIODmode &= (0 << 24);
 80001e4:	2000      	movs	r0, #0
 80001e6:	f8d3 2c00 	ldr.w	r2, [r3, #3072]	@ 0xc00
 80001ea:	f8c3 0c00 	str.w	r0, [r3, #3072]	@ 0xc00
	*pGPIODmode &= (0 << 25);
 80001ee:	f8d3 2c00 	ldr.w	r2, [r3, #3072]	@ 0xc00
 80001f2:	f8c3 0c00 	str.w	r0, [r3, #3072]	@ 0xc00

//	b.make the 24th bit position as SET(!)
//	*pGPIODmode |= 0x01000000;
	*pGPIODmode |= (1 << 24);
 80001f6:	f8d3 2c00 	ldr.w	r2, [r3, #3072]	@ 0xc00
 80001fa:	f042 7280 	orr.w	r2, r2, #16777216	@ 0x1000000
 80001fe:	f8c3 2c00 	str.w	r2, [r3, #3072]	@ 0xc00

//	3. Set the 12th bit of the Output data as SET(!)
//	*pGPIOoutputdata |= 0x00001000;
	while(1){

		uint32_t statusReg = *pGPIOInputReg & 1;
 8000202:	691a      	ldr	r2, [r3, #16]

		if(statusReg){
 8000204:	f012 0f01 	tst.w	r2, #1
			*pGPIOoutputdata |= (1 << 12);
 8000208:	f8d3 2c14 	ldr.w	r2, [r3, #3092]	@ 0xc14
 800020c:	bf14      	ite	ne
 800020e:	f442 5280 	orrne.w	r2, r2, #4096	@ 0x1000
//		//delay
//		for(uint32_t i = 0; i < 3100000; i++);

		//OFF
		else{
			*pGPIOoutputdata &= ~(1 << 12);
 8000212:	f422 5280 	biceq.w	r2, r2, #4096	@ 0x1000
 8000216:	f8c3 2c14 	str.w	r2, [r3, #3092]	@ 0xc14
 800021a:	e7f2      	b.n	8000202 <main+0x3a>
 800021c:	40023000 	.word	0x40023000
 8000220:	40020000 	.word	0x40020000

08000224 <Reset_Handler>:

  .section .text.Reset_Handler
  .weak Reset_Handler
  .type Reset_Handler, %function
Reset_Handler:
  ldr   r0, =_estack
 8000224:	480d      	ldr	r0, [pc, #52]	@ (800025c <LoopForever+0x2>)
  mov   sp, r0          /* set stack pointer */
 8000226:	4685      	mov	sp, r0
/* Call the clock system initialization function.*/
  bl  SystemInit
 8000228:	f3af 8000 	nop.w

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 800022c:	480c      	ldr	r0, [pc, #48]	@ (8000260 <LoopForever+0x6>)
  ldr r1, =_edata
 800022e:	490d      	ldr	r1, [pc, #52]	@ (8000264 <LoopForever+0xa>)
  ldr r2, =_sidata
 8000230:	4a0d      	ldr	r2, [pc, #52]	@ (8000268 <LoopForever+0xe>)
  movs r3, #0
 8000232:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8000234:	e002      	b.n	800023c <LoopCopyDataInit>

08000236 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8000236:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8000238:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 800023a:	3304      	adds	r3, #4

0800023c <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 800023c:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 800023e:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8000240:	d3f9      	bcc.n	8000236 <CopyDataInit>

/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8000242:	4a0a      	ldr	r2, [pc, #40]	@ (800026c <LoopForever+0x12>)
  ldr r4, =_ebss
 8000244:	4c0a      	ldr	r4, [pc, #40]	@ (8000270 <LoopForever+0x16>)
  movs r3, #0
 8000246:	2300      	movs	r3, #0
  b LoopFillZerobss
 8000248:	e001      	b.n	800024e <LoopFillZerobss>

0800024a <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 800024a:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 800024c:	3204      	adds	r2, #4

0800024e <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 800024e:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8000250:	d3fb      	bcc.n	800024a <FillZerobss>


/* Call static constructors */
  bl __libc_init_array
 8000252:	f000 f811 	bl	8000278 <__libc_init_array>
/* Call the application's entry point.*/

  bl main
 8000256:	f7ff ffb7 	bl	80001c8 <main>

0800025a <LoopForever>:

LoopForever:
  b LoopForever
 800025a:	e7fe      	b.n	800025a <LoopForever>
  ldr   r0, =_estack
 800025c:	20020000 	.word	0x20020000
  ldr r0, =_sdata
 8000260:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8000264:	20000000 	.word	0x20000000
  ldr r2, =_sidata
 8000268:	080002e0 	.word	0x080002e0
  ldr r2, =_sbss
 800026c:	20000000 	.word	0x20000000
  ldr r4, =_ebss
 8000270:	2000001c 	.word	0x2000001c

08000274 <ADC_IRQHandler>:
 * @retval : None
*/
  .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b Infinite_Loop
 8000274:	e7fe      	b.n	8000274 <ADC_IRQHandler>
	...

08000278 <__libc_init_array>:
 8000278:	b570      	push	{r4, r5, r6, lr}
 800027a:	4d0d      	ldr	r5, [pc, #52]	@ (80002b0 <__libc_init_array+0x38>)
 800027c:	4c0d      	ldr	r4, [pc, #52]	@ (80002b4 <__libc_init_array+0x3c>)
 800027e:	1b64      	subs	r4, r4, r5
 8000280:	10a4      	asrs	r4, r4, #2
 8000282:	2600      	movs	r6, #0
 8000284:	42a6      	cmp	r6, r4
 8000286:	d109      	bne.n	800029c <__libc_init_array+0x24>
 8000288:	4d0b      	ldr	r5, [pc, #44]	@ (80002b8 <__libc_init_array+0x40>)
 800028a:	4c0c      	ldr	r4, [pc, #48]	@ (80002bc <__libc_init_array+0x44>)
 800028c:	f000 f818 	bl	80002c0 <_init>
 8000290:	1b64      	subs	r4, r4, r5
 8000292:	10a4      	asrs	r4, r4, #2
 8000294:	2600      	movs	r6, #0
 8000296:	42a6      	cmp	r6, r4
 8000298:	d105      	bne.n	80002a6 <__libc_init_array+0x2e>
 800029a:	bd70      	pop	{r4, r5, r6, pc}
 800029c:	f855 3b04 	ldr.w	r3, [r5], #4
 80002a0:	4798      	blx	r3
 80002a2:	3601      	adds	r6, #1
 80002a4:	e7ee      	b.n	8000284 <__libc_init_array+0xc>
 80002a6:	f855 3b04 	ldr.w	r3, [r5], #4
 80002aa:	4798      	blx	r3
 80002ac:	3601      	adds	r6, #1
 80002ae:	e7f2      	b.n	8000296 <__libc_init_array+0x1e>
 80002b0:	080002d8 	.word	0x080002d8
 80002b4:	080002d8 	.word	0x080002d8
 80002b8:	080002d8 	.word	0x080002d8
 80002bc:	080002dc 	.word	0x080002dc

080002c0 <_init>:
 80002c0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80002c2:	bf00      	nop
 80002c4:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80002c6:	bc08      	pop	{r3}
 80002c8:	469e      	mov	lr, r3
 80002ca:	4770      	bx	lr

080002cc <_fini>:
 80002cc:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80002ce:	bf00      	nop
 80002d0:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80002d2:	bc08      	pop	{r3}
 80002d4:	469e      	mov	lr, r3
 80002d6:	4770      	bx	lr
